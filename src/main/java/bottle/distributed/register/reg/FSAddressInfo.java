// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `FileServiceReg.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package bottle.distributed.register.reg;

/**
 * 文件服务器地址信息
 **/
public class FSAddressInfo implements java.lang.Cloneable, java.io.Serializable
{
    public boolean isValid;

    public String uploadHttpUrl;

    public String downloadHttpUrlPrefix;

    public FSAddressInfo()
    {
        uploadHttpUrl = "";
        downloadHttpUrlPrefix = "";
    }

    public FSAddressInfo(boolean isValid, String uploadHttpUrl, String downloadHttpUrlPrefix)
    {
        this.isValid = isValid;
        this.uploadHttpUrl = uploadHttpUrl;
        this.downloadHttpUrlPrefix = downloadHttpUrlPrefix;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        FSAddressInfo _r = null;
        if(rhs instanceof FSAddressInfo)
        {
            _r = (FSAddressInfo)rhs;
        }

        if(_r != null)
        {
            if(isValid != _r.isValid)
            {
                return false;
            }
            if(uploadHttpUrl != _r.uploadHttpUrl)
            {
                if(uploadHttpUrl == null || _r.uploadHttpUrl == null || !uploadHttpUrl.equals(_r.uploadHttpUrl))
                {
                    return false;
                }
            }
            if(downloadHttpUrlPrefix != _r.downloadHttpUrlPrefix)
            {
                if(downloadHttpUrlPrefix == null || _r.downloadHttpUrlPrefix == null || !downloadHttpUrlPrefix.equals(_r.downloadHttpUrlPrefix))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::reg::FSAddressInfo");
        __h = IceInternal.HashUtil.hashAdd(__h, isValid);
        __h = IceInternal.HashUtil.hashAdd(__h, uploadHttpUrl);
        __h = IceInternal.HashUtil.hashAdd(__h, downloadHttpUrlPrefix);
        return __h;
    }

    public FSAddressInfo
    clone()
    {
        FSAddressInfo c = null;
        try
        {
            c = (FSAddressInfo)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeBool(isValid);
        __os.writeString(uploadHttpUrl);
        __os.writeString(downloadHttpUrlPrefix);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        isValid = __is.readBool();
        uploadHttpUrl = __is.readString();
        downloadHttpUrlPrefix = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, FSAddressInfo __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public FSAddressInfo
    __read(IceInternal.BasicStream __is, FSAddressInfo __v)
    {
        if(__v == null)
        {
             __v = new FSAddressInfo();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final FSAddressInfo __nullMarshalValue = new FSAddressInfo();

    public static final long serialVersionUID = -1055117286L;
}
